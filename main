import java.util.*;

//  This class represents a Connect Four game that implements AbstractStrategyGame interface. Has
//  operations to print the board and instructions, switch player turns, and find the winner or
//  tie.
public class ConnectFour implements AbstractStrategyGame {
    private char[][] board;
    private boolean isXTurn;

    //  initializes and constructs board (char[][]) and isXTurn (boolean)
    public ConnectFour() {
        board = new char[][]{{'-', '-', '-', '-', '-', '-', '-'},
                             {'-', '-', '-', '-', '-', '-', '-'},
                             {'-', '-', '-', '-', '-', '-', '-'},
                             {'-', '-', '-', '-', '-', '-', '-'},
                             {'-', '-', '-', '-', '-', '-', '-'},
                             {'-', '-', '-', '-', '-', '-', '-'}};
        isXTurn = true;
    }

    //  returns instructions (String)
    public String instructions() {
        String result = "";
        result += "Player 1 is X. Player 2 is O. Choose where to play by entering the row and ";
        result += "column number.\n(0, 0) is the upper left corner and (6, 5) is the lower right ";
        result += "corner.\nSpaces shown as - are empty. The game ends when one player marks ";
        result += "four spaces in a row,\nin which that player wins, or when all spaces are ";
        result += "filled in the board, then it is a tie.";
        return result;
    }

    //  returns current state of board (String)
    public String toString() {
        String result = "";
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                result += board[i][j] + " ";
            }
            result += "\n";
        }
        return result;
    }

    //  returns if game is over (boolean)
    public boolean isGameOver() {
        return getWinner() >= 0;
    }

    //  returns index (int) of the current state of the game
    //  1 = Player 1 (X) wins, 2 = Player 2 (O) wins, 0 = tie, -1 = game is not over
    public int getWinner() {
        for(int row = 0; row < board.length; row++) {
            for(int col = 0; col < board[0].length; col++) {
                if (checkHorizontal(row, col) || checkVertical(row, col) || checkDRDiag(row, col)
                    || checkDLDiag(row, col)) {
                    if (board[row][col] == 'X') {
                        return 1;
                    } else {
                        return 2;
                    }
                }
            }
        }
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if (board[i][j] == '-') {
                    return -1;
                }
            }
        }
        return 0;
    }

    //  returns whether or not there is a connect four horizontally (boolean) from given starting
    //  point of row (int) and col (int)
    public boolean checkHorizontal(int row, int col) {
        for(int i = 0; i < 3; i++) {
            if (col == board.length) {
                return false;
            }
            if (board[row][col] == '-') {
                return false;
            }
            if (board[row][col] != board[row][col + 1]) {
                return false;
            }
            col = col + 1;
        }
        return true;
    }

    //  returns whether or not there is a connect four vertically (boolean) from given starting
    //  point of row (int) and col (int)
    public boolean checkVertical(int row, int col) {
        for(int i = 0; i < 3; i++) {
            if (row == board.length - 1) {
                return false;
            }
            if (board[row][col] == '-') {
                return false;
            }
            if (board[row][col] != board[row + 1][col]) {
                return false;
            }
            row = row + 1;
        }
        return true;
    }

    //  returns whether or not there is a connect four diagonally in down right direction (boolean)
    //  from given starting point of row (int) and col (int)
    public boolean checkDRDiag(int row, int col) {
        for(int i = 0; i < 3; i++) {
            if (row == board.length - 1 || col == board.length) {
                return false;
            }
            if (board[row][col] == '-') {
                return false;
            }
            if (board[row][col] != board[row + 1][col + 1]) {
                return false;
            }
            row = row + 1;
            col = col + 1;
        }
        return true;
    }

    //  returns whether or not there is a connect four diagonally in down left direction (boolean)
    //  from given starting point of row (int) and col (int)
    public boolean checkDLDiag(int row, int col) {
        for(int i = 0; i < 3; i++) {
            if (row == board.length - 1 || col <= 0) {
                return false;
            }
            if (board[row][col] == '-') { 
                return false;
            }
            if (board[row][col] != board[row + 1][col - 1]) {
                return false;
            }
            row = row + 1;
            col = col - 1;
        }
        return true;
    }

    //  returns index (int) of which player's turn it is
    //  1 = Player 1 (X), 2 = Player 2 (O)
    public int getNextPlayer() {
        if (isXTurn) {
            return 1;
        }
        return 2;
    }

    //places X (Player 1) or O (Player 2) on board based on player's given input (Scanner)
    public void makeMove(Scanner input) {
        char currPlayer;
        if (isXTurn) {
            currPlayer = 'X';
        } else {
            currPlayer = 'O';
        }
        System.out.print("Column? ");
        int col = input.nextInt();
        makeMove(col, currPlayer);
        isXTurn = !isXTurn;
    }

    //  private helper method for makeMove
    //  places X or O on board based on given col (int) and currPlayer (char)
    //  throws IllegalArgumentException if column board position is out of bounds
    //  throws IllegalArgumentException if column is filled
    //  board bounds for col is 0 - 6
    private void makeMove(int col, char currPlayer) {
        int count = 0;
        if (col < 0 || col >= board[0].length) {
            throw new IllegalArgumentException("Invalid board position");
        }
        if (board[0][col] != '-') {
            throw new IllegalArgumentException("Column is already filled.");
        }
        for(int row = 5; row >= 0; row--) {
            if (board[row][col] == '-' && count == 0) {
                board[row][col] = currPlayer;
                count++;
            }
        }
        count--;
    }
}
